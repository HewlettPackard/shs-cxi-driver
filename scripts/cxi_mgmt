#!/bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright 2025 Hewlett Packard Enterprise Development LP
#
# Command Line Utility for Configuration and Management of the resource groups
# and RX/TX Profiles.
#

shopt -s nullglob
CONFIG_MOUNT="/sys/kernel/config"

# Function to display usage information
usage() {
cat << EOF
	Usage: $0 command [--device <device>] [OPTIONS]

		create --rsrc-grp <group-name>
		create --rx-profile <profile-name>
		create --tx-profile <profile-name>
		get-devices
		teardown --rsrc-grp <group-name>
		teardown --rx-profile <profile-name>
		teardown --tx-profile <profile-name>
		get-in-use --rsrc-grp <group-name>
   		get-rsrc-grp --device <device> --rsrc-grp
   		enable  --rsrc-grp <group-name>
   		disable --rsrc-grp <group-name>
   		add-ac-entry --rsrc-grp <group-name> <ac-name> <data> <type>
   		add-ac-entry --rx-profile <profile-name> <ac-name> <data> <type>
   		add-ac-entry --tx-profile <profile-name> <ac-name> <data> <type>
		remove-ac-entry --rsrc-grp <group-name> <ac-name>
   		remove-ac-entry --rx-profile <profile-name> <ac-name>
   		remove-ac-entry --tx-profile <profile-name> <ac-name>
   		add-resource --rsrc-grp <group-name> <res-type> <max-val> <reserved-val>
   		remove-resource --rsrc-grp <group-name> <res-type>
   		cleanup
EOF
		exit 1
}

is_configfs_path_present() {
	if [[ ! -d "$CONFIG_MOUNT" ]]
	then
		echo "Path $CONFIG_MOUNT does not exit"
		exit 1
	fi
}

cleanup_configfs() {
	cd $CONFIG_MOUNT/cxi
	for dev in *
	do
		device=$dev
		cd  $CONFIG_MOUNT/cxi/$device/rgroup
		for rgp in *
		do
			echo "false" > $CONFIG_MOUNT/cxi/$device/rgroup/$rgp/state/enabled
			teardown_resource_group $device $rgp
			if [ $? -ne 0 ]
			then
				echo "Teardown of resource group $rgp for $device failed"
			else
				echo "Teardown of resource group $rgp for $device succeeded"
			fi
		done
		cd $CONFIG_MOUNT/cxi
	done

	return 0
}

# Check your environment settings
check_setup() {
	is_configfs_path_present
}

# Get all the in use resources
get_in_use_resources() {
	device=$1
	rgroup_name=$2
	if [ ! -d $CONFIG_MOUNT/cxi/$device ]
	then
		echo "Error - Device $device not available"
		exit 1
	fi
	cd $CONFIG_MOUNT/cxi/$device/rgroup
	if [ ! -d "$rgroup_name" ]
	then
		echo "Error - Resource group $rgroup_name not present for $device"
		exit 1
	fi
	cd  $CONFIG_MOUNT/cxi/$device/rgroup/$rgroup_name/resources
	for res_type in *
	do
		in_use=$(cat $CONFIG_MOUNT/cxi/$device/rgroup/$rgroup_name/resources/$res_type/in_use)
		if [ "$in_use" -gt 0 ]
		then
			echo "Resource type $res_type has in use $in_use"
		fi
	done
}

# Create a resource group for a device
# Takes a device and resource group name as argument
create_resource_group() {
	device=$1
	resource_group_name=$2
	if [ ! -d $CONFIG_MOUNT/cxi/$device ]
	then
		echo "Error - Device $device not available"
		exit 1
	fi
	cd $CONFIG_MOUNT/cxi/$device/rgroup
	if [ -d "$resource_group_name" ]
	then
		echo "Error - Resource group $resource_group_name already present for $device"
		exit 1
	fi
	mkdir $resource_group_name
	if [ $? -ne 0 ]
	then
		echo "Unable to create directory $resource_group_name in configfs FS"
		return 1
	fi
	cd $resource_group_name
	if [ ! -f id ]
	then
		echo "File id not available for resource group $resource_group_name\n"
		echo "and device $device"
	fi
	mkdir attr
	mkdir state
	mkdir resources
	mkdir ac-entry
}

add_resource() {
	device=$1
	res_grp_name=$2
	res_type=$3
	max_val=$4
	reserved_val=$5

	if [ ! -d $CONFIG_MOUNT/cxi/$device ]
	then
		echo "Error - Device $device not available"
		exit 1
	fi

	if [ ! -d $CONFIG_MOUNT/cxi/$device/rgroup/$res_grp_name ]
	then
		echo "Error - Resource Group $res_grp_name not available"
		exit 1
	fi

	mkdir $CONFIG_MOUNT/cxi/$device/rgroup/$res_grp_name/resources/$res_type
	if [ $? -ne 0 ]
	then
		echo "Unable to create directory $res_type inside resources directory"
		return 1
	fi
	echo $max_val > $CONFIG_MOUNT/cxi/$device/rgroup/$res_grp_name/resources/$res_type/max
	echo $reserved_val > $CONFIG_MOUNT/cxi/$device/rgroup/$res_grp_name/resources/$res_type/reserved
}

remove_resource() {
	device=$1
	resource_group=$2
	resource_type=$3
	if [ ! -d $CONFIG_MOUNT/cxi/$device ]
	then
		echo "Error - Device $device not available"
		exit 1
	fi

	cd $CONFIG_MOUNT/cxi/$device/rgroup

	if [ ! -d  $resource_group ]
	then
		echo "Error - Resource group $resource_group not available for device $device"
		exit 1
	fi

	flag=$(cat $CONFIG_MOUNT/cxi/$device/rgroup/$resource_group/state/enabled)

	if [ "$flag" == "false" ]
	then
		rmdir $CONFIG_MOUNT/cxi/$device/rgroup/$resource_group/resources/$resource_type
		echo "Removed resource type $resource_type from the resource group $resource_group"
		return 0
	fi

	echo "Cannot remove resource type as resource group is still enabled"
	return 1
}

# Remove the specified resource group for a device. Takes the device and resource
# group name as argument.
teardown_resource_group() {
	device=$1
	resource_name=$2

	if [ ! -d $CONFIG_MOUNT/cxi/$device ]
	then
		echo "Error - Device $device not available"
		exit 1
	fi

	cd $CONFIG_MOUNT/cxi/$device/rgroup

	if [ ! -d  $resource_name ]
	then
		echo "Error - Resource group $resource_name not available for device $device"
		exit 1
	fi

	echo "false" > $CONFIG_MOUNT/cxi/$device/rgroup/$resource_name/state/enabled

	if [ -d  $CONFIG_MOUNT/cxi/$device/rgroup/$resource_name/resources ]
	then
		cd $CONFIG_MOUNT/cxi/$device/rgroup/$resource_name/resources

		for res_type in *
		do
			remove_resource $device $resource_name $res_type
		done

		rmdir $CONFIG_MOUNT/cxi/$device/rgroup/$resource_name/resources
	fi

	if [ -d  $CONFIG_MOUNT/cxi/$device/rgroup/$resource_name/ac-entry ]
	then
		cd $CONFIG_MOUNT/cxi/$device/rgroup/$resource_name/ac-entry

		for ac_ent in *
		do
			remove_ac_entry_resource_group $device $resource_name $ac_ent
		done

		rmdir $CONFIG_MOUNT/cxi/$device/rgroup/$resource_name/ac-entry
	fi

	if [ -d  $CONFIG_MOUNT/cxi/$device/rgroup/$resource_name/state ]
	then
		rmdir $CONFIG_MOUNT/cxi/$device/rgroup/$resource_name/state
	fi

	if [ -d  $CONFIG_MOUNT/cxi/$device/rgroup/$resource_name/attr ]
	then
		rmdir $CONFIG_MOUNT/cxi/$device/rgroup/$resource_name/attr
	fi

	rmdir $CONFIG_MOUNT/cxi/$device/rgroup/$resource_name

	return 0
}

# Resource Group name and associated resource group ID for a device
# Takes device as argument
get_resource_group() {
	device=$1
	if [ ! -d $CONFIG_MOUNT/cxi/$device ]
	then
		echo "Error - Device $device not available"
		exit 1
	fi
	cd $CONFIG_MOUNT/cxi/$device/rgroup
	for res_grp_id in *
	do
		if [ ! -f $res_grp_id/id ]
		then
			echo "Error - File id not available for resource group $res_grp_id"
			exit 1
		fi
		rid=$(cat $res_grp_id/id)
		echo "Resource group name: $res_grp_id, Resource group id: $rid"
	done
}

create_rx_profile() {
	echo "TODO - Create RX Profile"
	exit 1
	device=$1
	rx_prof_name=$2

	if [ ! -d $CONFIG_MOUNT/cxi/$device ]
	then
		echo "Error - Device $device not available"
		exit 1
	fi

	mkdir $CONFIG_MOUNT/cxi/$device/rx-profile/$rx_prof_name
}

create_tx_profile() {
	echo "TODO - Create TX Profile"
	exit 1
	device=$1
	tx_prof_name=$2

	if [ ! -d $CONFIG_MOUNT/cxi/$device ]
	then
		echo "Error - Device $device not available"
		exit 1
	fi

	mkdir $CONFIG_MOUNT/cxi/$device/tx-profile/$tx_prof_name
}

teardown_rx_profile() {
	echo "TODO - Teardown RX Profile"
	exit 1
	device=$1
	rx_prof_name=$2

	if [ ! -d $CONFIG_MOUNT/cxi/$device ]
	then
		echo "Error - Device $device not available"
		exit 1
	fi

	rmdir $CONFIG_MOUNT/cxi/$device/rx-profile/$rx_prof_name
}

teardown_tx_profile() {
	echo "TODO - Teardown TX Profile"
	exit 1
	device=$1
	tx_prof_name=$2

	if [ ! -d $CONFIG_MOUNT/cxi/$device ]
	then
		echo "Error - Device $device not available"
		exit 1
	fi

	rmdir $CONFIG_MOUNT/cxi/$device/tx-profile/$tx_prof_name
}

add_ac_entry_resource_group() {
	device=$1
	resource_group=$2
	ac_name=$3
	data_val=$4
	type_val=$5

	if [ ! -d $CONFIG_MOUNT/cxi/$device ]
	then
		echo "Error - Device $device not available"
		exit 1
	fi

	if [ ! -d $CONFIG_MOUNT/cxi/$device/rgroup/$resource_group ]
	then
		echo "Error -  Resource Group $resource_group not present"
		exit 1
	fi

	flag=$(cat $CONFIG_MOUNT/cxi/$device/rgroup/$resource_group/state/enabled)

	if [ "$flag" == "true" ]
	then
		echo "ac-entry $ac_name cannot be added as $resource_group"
		exit 1
	fi

	mkdir $CONFIG_MOUNT/cxi/$device/rgroup/$resource_group/ac-entry/$ac_name
	if [ $? -ne 0 ]
	then
		echo "ac-entry $ac_name entry cannot be created"
		return 1
	fi
	echo $data_val > $CONFIG_MOUNT/cxi/$device/rgroup/$resource_group/ac-entry/$ac_name/data
	echo $type_val > $CONFIG_MOUNT/cxi/$device/rgroup/$resource_group/ac-entry/$ac_name/type
	if [ $? -ne 0 ]
	then
		echo "Unable to add ac entry $ac_name to resource group $resource_group"
		return 1
	else
		return 0
	fi
}

remove_ac_entry_resource_group() {
	device=$1
	resource_group=$2
	ac_name=$3

	if [ ! -d $CONFIG_MOUNT/cxi/$device ]
	then
		echo "Error - Device $device not available"
		exit 1
	fi

	if [ ! -d $CONFIG_MOUNT/cxi/$device/rgroup/$resource_group ]
	then
		echo "Error -  Resource Group $resource_group not present"
		exit 1
	fi

	if [ ! -d $CONFIG_MOUNT/cxi/$device/rgroup/$resource_group/ac-entry/$ac_name ]
	then
		echo "Error - $ac_name ac-entry not present"
		exit 1
	fi

	flag=$(cat $CONFIG_MOUNT/cxi/$device/rgroup/$resource_group/state/enabled)

	if [ "$flag" == "false" ]
	then
		rmdir $CONFIG_MOUNT/cxi/$device/rgroup/$resource_group/ac-entry/$ac_name
		return 0
	fi

	echo "Access Control entry $ac_name cannot be removed from resource group $resource_group"
	return 1
}

add_ac_entry_rx_profile() {
	echo "TODO: Add Access Control Entry for RX Profile"
	exit 1
	device=$1
	rx_prof_name=$2
	ac_name=$3

	if [ ! -d $CONFIG_MOUNT/cxi/$device ]
	then
		echo "Error - Device $device not available"
		exit 1
	fi

	mkdir $CONFIG_MOUNT/cxi/$device/rx-profile/$rx_prof_name/ac-entry/$ac_name
	if [ $? -ne 0 ]
	then
		echo "Unable to add ac entry $ac_name to rx profile $rx_prof_name"
		return 1
	else
		return 0
	fi
}

remove_ac_entry_rx_profile() {
	echo "TODO - Remove Access Control Entry for RX Profile"
	exit 1
	device=$1
	rx_prof_name=$2
}

add_ac_entry_tx_profile() {
	echo "TODO - Add Access Control Entry for TX Profile"
	exit 1
	device=$1
	tx_prof_name=$2
}

remove_ac_entry_tx_profile() {
	echo "TODO - Remove Access Control Entry for TX Profile"
	exit 1
	device=$1
	tx_prof_name=$2
}

# Enable a specified resource group for a device
# Takes device and resource group name as argument
enable_resource_grp() {
	device=$1
	rgroup_name=$2
	if [ ! -d $CONFIG_MOUNT/cxi/$device ]
	then
		echo "Error - Device $device not available"
		exit 1
	fi
	if [ ! -d $CONFIG_MOUNT/cxi/$device/rgroup/$rgroup_name ]
	then
		echo "Error - Resource group $rgroup_name not available for device $device"
		exit 1
	fi
	echo "Enabling resource group $rgroup_name on device $device"
	echo "true" > $CONFIG_MOUNT/cxi/$device/rgroup/$rgroup_name/state/enabled
}

# Disable a specified resource group for a device
# Takes device and resource group name as argument
disable_resource_grp() {
	device=$1
	rgroup_name=$2
	if [ ! -d $CONFIG_MOUNT/cxi/$device ]
	then
		echo "Error - Device $device not available"
		exit 1
	fi
	if [ ! -d $CONFIG_MOUNT/cxi/$device/rgroup/$rgroup_name ]
	then
		echo "Error - Resource group $rgroup_name not available for device $device"
		exit 1
	fi
	echo "Disabling resource group $rgroup_name on device $device"
	echo "false" > $CONFIG_MOUNT/cxi/$device/rgroup/$rgroup_name/state/enabled
}

# List all the available NIC devices on the system
get_devices() {
	cd $CONFIG_MOUNT/cxi
	for dev in *
	do
        	echo $dev
	done
}

# Initialize all variables here
option=""
sub_option=""
device="cxi0"
rgroup_name=""

# While Loop to process command line flags/options
while true; do
    case "$1" in
        create)
            option="create"
	    shift
            ;;
        teardown)
            option="teardown"
	    shift
            ;;
        add-ac-entry)
            option="add-ac-entry"
	    shift
            ;;
        remove-ac-entry)
            option="remove-ac-entry"
	    shift
            ;;
        enable)
            option="enable"
	    shift
            ;;
        disable)
            option="disable"
	    shift
            ;;
        add-resource)
            option="add-resource"
	    shift
            ;;
        remove-resource)
            option="remove-resource"
	    shift
	    ;;
        get-rsrc-grp)
	    option="get-rsrc-grp"
	    shift
	    ;;
        --device)
	    device="$2"
	    shift 2
            if [[ -z "$device" ]]
	    then
            	echo "Error: --device requires <device>."
           	usage
		exit 1
            fi
            ;;
        --rsrc-grp)
	    if [[ "$option" == "get-rsrc-grp" ]]
	    then
		check_setup
		get_resource_group $device
		break
	    elif [[ "$option" == "add-resource" ]]
	    then
                rgroup_name="$2"
		shift
		res_name="$2"
		shift
		max_val="$2"
		shift
		res_val="$2"
                if [[ -z "$rgroup_name" || -z "$res_name" || -z "$max_val" || -z "$res_val" ]]
	        then
                	echo "Error: --rsrc-grp requires <rgroup> <resource> <data_val> <type_val>"
            		usage
			exit 1
        	fi
		check_setup
		add_resource $device $rgroup_name $res_name $max_val $res_val
		break
	    elif [[ "$option" == "remove-resource" ]]
	    then
                rgroup_name="$2"
		shift
		res_name="$2"
                if [[ -z "$rgroup_name" || -z "$res_name" ]]
	        then
                	echo "Error: --rsrc-grp requires <rgroup> <resource> <res-name>"
            		usage
			exit 1
        	fi
		check_setup
		remove_resource $device $rgroup_name $res_name
		break
            elif [[ "$option" == "get-in-use" ]]
	    then
                rgroup_name="$2"
		shift
                if [[ -z "$rgroup_name" ]]
	        then
                	echo "Error: --rsrc-grp requires <rgroup>."
            		usage
			exit 1
        	fi
	        check_setup
	        get_in_use_resources $device $rgroup_name
		break
            elif [[ "$option" == "enable" ]]
	    then
                rgroup_name="$2"
		shift
                if [[ -z "$rgroup_name" ]]
	        then
                	echo "Error: --rsrc-grp requires <rgroup>."
            		usage
			exit 1
        	fi
		check_setup
		enable_resource_grp $device $rgroup_name
		break
	    elif [[ "$option" == "disable" ]]
	    then
                rgroup_name="$2"
		shift
                if [[ -z "$rgroup_name" ]]
	        then
                	echo "Error: --rsrc-grp requires <rgroup>."
            		usage
			exit 1
        	fi
		check_setup
		disable_resource_grp $device $rgroup_name
		break
	    elif [[ "$option" == "create" ]]
	    then
                rgroup_name="$2"
		shift
                if [[ -z "$rgroup_name" ]]
	        then
                	echo "Error: --rsrc-grp requires <rgroup>."
            		usage
			exit 1
        	fi
		check_setup
		create_resource_group $device $rgroup_name
		break
	    elif [[ "$option" == "teardown" ]]
	    then
                rgroup_name="$2"
		shift
                if [[ -z "$rgroup_name" ]]
	        then
                	echo "Error: --rsrc-grp requires <rgroup>."
            		usage
			exit 1
        	fi
		check_setup
		teardown_resource_group $device $rgroup_name
		break
	    elif [[ "$option" == "add-ac-entry" ]]
	    then
                rgroup_name="$2"
		shift
		ac_name="$2"
		shift
		data_val="$2"
		shift
		type_val="$2"
                if [[ -z "$rgroup_name" || -z "$ac_name" || -z "$data_val" || -z "$type_val" ]]
	        then
                	echo "Error: --rsrc-grp requires <rgroup> <ac-name> <data_val> <type_val>"
            		usage
			exit 1
        	fi
		check_setup
		add_ac_entry_resource_group $device $rgroup_name $ac_name $data_val $type_val
		break
	    elif [[ "$option" == "remove-ac-entry" ]]
	    then
                rgroup_name="$2"
		shift
		ac_name="$2"
                if [[ -z "$rgroup_name" || -z "$ac_name" ]]
	        then
                	echo "Error: --rsrc-grp requires <rgroup> and <ac-name>"
            		usage
			exit 1
        	fi
		check_setup
		remove_ac_entry_resource_group $device $rgroup_name $ac_name
		break
            else
                usage
		exit 1
            fi
            ;;
        --rx-profile)
            if [[ "$option" == "create" ]]
	    then
                rx_prof_name="$2"
		shift
                if [[ -z "$rx_prof_name" ]]
	        then
                	echo "Error: --rx-profile requires <rx-profile-name>."
            		usage
			exit 1
        	fi
	        check_setup
	        create_rx_profile $device $rx_prof_name
		break
            elif [[ "$option" == "teardown" ]]
	    then
                rx_prof_name="$2"
		shift
                if [[ -z "$rx_prof_name" ]]
	        then
                	echo "Error: --rx-profile requires <rx-profile-name>."
            		usage
			exit 1
        	fi
	        check_setup
	        teardown_rx_profile $device $rx_prof_name
		break
            elif [[ "$option" == "add-ac-entry" ]]
	    then
                rx_prof_name="$2"
		shift
		ac_name="$2"
                if [[ -z "$rx_prof_name" || -z "$ac_name" ]]
	        then
                	echo "Error: --rx-profile requires <rx-profile-name> and <ac-name>"
            		usage
			exit 1
        	fi
	        check_setup
	        add_ac_entry_rx_profile $device $rx_prof_name $ac_name
		break
            elif [[ "$option" == "remove-ac-entry" ]]
	    then
                rx_prof_name="$2"
		shift
		ac_name="$2"
                if [[ -z "$rx_prof_name" || -z "$ac_name" ]]
	        then
                	echo "Error: --rx-profile requires <rx-profile-name> and <ac-name>"
            		usage
			exit 1
        	fi
	        check_setup
	        remove_ac_entry_rx_profile $device $rx_prof_name $ac_name
		break
	    else
		usage
		exit 1
	    fi
	    ;;
        --tx-profile)
            if [[ "$option" == "create" ]]
	    then
                tx_prof_name="$2"
		shift
                if [[ -z "$tx_prof_name" ]]
	        then
                	echo "Error: --tx-profile requires <tx-profile-name>."
            		usage
			exit 1
        	fi
	        check_setup
	        create_tx_profile $device $tx_prof_name
		break
            elif [[ "$option" == "teardown" ]]
	    then
                tx_prof_name="$2"
		shift
                if [[ -z "$tx_prof_name" ]]
	        then
                	echo "Error: --tx-profile requires <tx-profile-name>."
            		usage
			exit 1
        	fi
	        check_setup
	        teardown_tx_profile $device $tx_prof_name
		break
            elif [[ "$option" == "add-ac-entry" ]]
	    then
                tx_prof_name="$2"
		shift
		ac_name="$2"
                if [[ -z "$tx_prof_name" || -z "$ac_name" ]]
	        then
                	echo "Error: --tx-profile requires <tx-profile-name> and <ac-name>."
            		usage
			exit 1
        	fi
	        check_setup
	        add_ac_entry_tx_profile $device $tx_prof_name $ac_name
		break
            elif [[ "$option" == "remove-ac-entry" ]]
	    then
                tx_prof_name="$2"
		shift
		ac_name="$2"
                if [[ -z "$tx_prof_name" || -z "$ac_name" ]]
	        then
                	echo "Error: --tx-profile requires <tx-profile-name> and <ac-name>."
            		usage
			exit 1
        	fi
	        check_setup
	        remove_ac_entry_tx_profile $device $tx_prof_name $ac_name
		break
	    else
		usage
		exit 1
	    fi
	    ;;
        help)
	    usage
	    break
	    ;;
        cleanup)
	    cleanup_configfs
	    break
	    ;;
        get-devices)
	    check_setup
	    get_devices
	    break
            ;;
        get-in-use)
            option="get-in-use"
	    shift
            ;;
        *)
	    usage
	    exit 1
            ;;
    esac
done
